#!/bin/sh
# --
# vhost
#
# DESCRIPTION
# Easier way to add new Apache Virtual Hosts in Mac OS X
# Forked from Patrick Gibson's virtualhost.sh repository and modified to
# my own liking.
#
# USAGE
#
#
# CHANGES SINCE FORKED
# - Extracted configurations to .vhost.conf file.
# - Minor renaming and minimizing inputs.
# - Commented the part where it opens a browser.
# - Removed version_check, not needed.
# - Removed the part that opens application, not needed.
#
# - Added ~/.vhost.conf checking.
# - Re-use the same structure as OS X's Apache installation,
#   virtualhosts/ instead of vhosts/
# - Simplify permission, only runs if you sudo. 
# - Suffix ServerName with .local
# - Removed WILDCARD
# - Move root to htdocs
# - Remove log checking, thus always create logs
#
# AUTHOR
# Andy Goh <andy@goh.my>
#
# URL
# http://github.com/hantu/vhost
#
# --

# Only if the script is being run as root
if [ "$(id -u)" != "0" ]; then
	/bin/echo "vhost: Re-run this using sudo."
	exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# You can now store your configuration directions in a ~/.vhost.conf
# file so that you can download new versions of the script without having to
# redo your own settings.
if [ -e ~/.vhost.conf ]; then
	. ~/.vhost.conf
else
	/bin/echo "Unable to locate ~/.vhost.conf, please make sure you have your config file available."
	exit 1
fi



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

host_exists()
{
	if grep -q -e "^$IP_ADDRESS	$1$" /etc/hosts ; then
		return 0
	else
		return 1
	fi
}

create_vhost()
{
	date=`/bin/date`
	
	htdocs_folder_path=$DOC_ROOT_PREFIX/$FOLDER/htdocs
	
	log_folder_path=$DOC_ROOT_PREFIX/$FOLDER/logs
	access_log="${log_folder_path}/access_log"
	error_log="${log_folder_path}/error_log"

	if [ ! -d "${htdocs_folder_path}" ]; then
		mkdir -p "${htdocs_folder_path}"
		chown $USER "${htdocs_folder_path}"
	fi
	
	if [ ! -d "${log_folder_path}" ]; then
		mkdir -p "${log_folder_path}"
		chown $USER "${log_folder_path}"
	fi
	
	cat << __EOF >$APACHE_CONFIG/virtualhosts/$1
# Created $date
<VirtualHost *:80>
  DocumentRoot "$2/htdocs"
  ServerName $1.local

  ScriptAlias /cgi-bin "$2/htdocs/cgi-bin"

  <Directory "$2/htdocs">
    Options All
    AllowOverride All
    Order allow,deny
    Allow from all
  </Directory>
  
  CustomLog "${access_log}" combined
  ErrorLog "${error_log}"
  
</VirtualHost>
__EOF
}

cleanup()
{
	/bin/echo
	/bin/echo "Cleaning up..."
	exit
}

# Based on FreeBSD's /etc/rc.subr
checkyesno()
{
	case $1 in
		#       "yes", "true", "on", or "1"
		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|[Yy]|1)
		return 0
		;;

		#       "no", "false", "off", or "0"
		[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|[Nn]|0)
		return 1
		;;
		
		*)
		return 1
		;;
	esac
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Make sure this is an Apache 2.x / Leopard machine
if [ ! -d $APACHE_CONFIG ]; then
	/bin/echo "Could not find ${APACHE_CONFIG}"
	/bin/echo "Sorry, this version of vhost only works with Leopard."
	/bin/echo
	
	exit 1
fi

# catch Ctrl-C
#trap 'cleanup' 2

# restore it
#trap '' 2

if [ -z $USER -o $USER = "root" ]; then
	if [ ! -z $SUDO_USER ]; then
		USER=$SUDO_USER
	else
		USER=""

		/bin/echo "ALERT! Your root shell did not provide your username."

		while : ; do
			if [ -z $USER ]; then
				while : ; do
					/bin/echo -n "Please enter *your* username: "
					read USER
					if [ -d $HOME_PARTITION/$USER ]; then
						break
					else
						/bin/echo "$USER is not a valid username."
					fi
				done
			else
				break
			fi
		done
	fi
fi

if [ -z $DOC_ROOT_PREFIX ]; then
	DOC_ROOT_PREFIX="${HOME_PARTITION}/$USER/Sites"
fi

usage()
{
	cat << __EOT
Usage: sudo vhost <name>
       sudo vhost --delete <name>
   where <name> is the one-word name you'd like to use. (e.g. mysite)
   
   Note that if "vhost" is not in your PATH, you will have to write
   out the full path to it: eg. /Users/$USER/Desktop/vhost <name>

__EOT
	exit 1
}

if [ -z $1 ]; then
	usage
else
	if [ $1 = "--delete" ]; then
		if [ -z $2 ]; then
			usage
		else
			VIRTUALHOST=$2
			DELETE=0
		fi		
	else
		VIRTUALHOST=$1
	fi
fi

# Test that the vhost name is valid (starts with a number or letter)
if ! /bin/echo $VIRTUALHOST | grep -q -E '^[A-Za-z0-9]+' ; then
	/bin/echo "Sorry, '$VIRTUALHOST' is not a valid host name to use. It must start with a letter or number."
	exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Delete the vhost if that's the requested action
#
if [ ! -z $DELETE ]; then
	/bin/echo -n "- Deleting vhost, $VIRTUALHOST... Continue? [Y/n]: "

	read continue
	
	case $continue in
	n*|N*) exit
	esac

	if host_exists $VIRTUALHOST.local ; then
		if ! checkyesno ${SKIP_ETC_HOSTS}; then
			/bin/echo -n "  - Removing $VIRTUALHOST from /etc/hosts... "
					
			cat /etc/hosts | grep -v $VIRTUALHOST > /tmp/hosts.tmp
		
			if [ -s /tmp/hosts.tmp ]; then
				mv /tmp/hosts.tmp /etc/hosts
			fi
		fi

		/bin/echo "done"
		
		if [ -e $APACHE_CONFIG/virtualhosts/$VIRTUALHOST ]; then
			/bin/echo "  - Excluding DocumentRoot for deletion, for backup purposes... "
							
			/bin/echo -n "  - Deleting vhost file... ($APACHE_CONFIG/virtualhosts/$VIRTUALHOST) "
			rm $APACHE_CONFIG/virtualhosts/$VIRTUALHOST
			/bin/echo "done"

			/bin/echo -n "+ Restarting Apache... "
			$APACHECTL graceful 1>/dev/null 2>/dev/null
			/bin/echo "done"
		fi
	else
		/bin/echo "- vhost $VIRTUALHOST does not currently exist. Aborting..."
	fi

	exit
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Make sure $APACHE_CONFIG/httpd.conf is ready for virtual hosting...
#
# If it's not, we will:
#
# a) Backup the original to $APACHE_CONFIG/httpd.conf.original
# b) Add a NameVirtualHost 127.0.0.1 line
# c) Create $APACHE_CONFIG/virtualhosts/ (vhost definition files reside here)
# d) Add a line to include all files in $APACHE_CONFIG/virtualhosts/
# e) Create a _localhost file for the default "localhost" vhost
#

if ! checkyesno ${SKIP_DOCUMENT_ROOT_CHECK} ; then
	if ! grep -q -e "^DocumentRoot \"$DOC_ROOT_PREFIX\"" $APACHE_CONFIG/httpd.conf ; then
		/bin/echo "httpd.conf's DocumentRoot does not point where it should."
		/bin/echo -n "Do you with to set it to $DOC_ROOT_PREFIX? [Y/n]: "	
		read DOCUMENT_ROOT
		case $DOCUMENT_ROOT in
		n*|N*)
			/bin/echo "Okay, just re-run this script if you change your mind."
		;;
		*)
			cat << __EOT | ed $APACHE_CONFIG/httpd.conf 1>/dev/null 2>/dev/null
/^DocumentRoot
i
#
.
j
+
i
DocumentRoot "$DOC_ROOT_PREFIX"
.
w
q
__EOT
		;;
		esac
	fi
fi

if ! grep -q -E "^NameVirtualHost \*:80" $APACHE_CONFIG/httpd.conf ; then

	/bin/echo "httpd.conf not ready for virtual hosting. Fixing..."
	cp $APACHE_CONFIG/httpd.conf $APACHE_CONFIG/httpd.conf.original
	/bin/echo "NameVirtualHost *:80" >> $APACHE_CONFIG/httpd.conf
	
	if [ ! -d $APACHE_CONFIG/vhosts ]; then
		mkdir $APACHE_CONFIG/vhosts
		create_vhost localhost $DOC_ROOT_PREFIX
	fi

	/bin/echo "Include $APACHE_CONFIG/vhosts"  >> $APACHE_CONFIG/httpd.conf


fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# If the host is not already defined in /etc/hosts, define it...
#

if ! checkyesno ${SKIP_ETC_HOSTS}; then
	if ! host_exists $VIRTUALHOST.local ; then

		/bin/echo "Creating a vhost for $VIRTUALHOST.local..."
		/bin/echo -n "+ Adding $VIRTUALHOST.local to /etc/hosts... "
		/bin/echo "$IP_ADDRESS	$1.local" >> /etc/hosts
		/bin/echo "done"
	fi
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ask the user where they would like to put the files for this virtual host
#
/bin/echo -n "+ Checking for $DOC_ROOT_PREFIX/$VIRTUALHOST... "

cd $DOC_ROOT_PREFIX

if [ ! -d $VIRTUALHOST ]; then
	/bin/echo "not found"
else
	/bin/echo "found"
fi
	
# See if we can find an appropriate folder
if ls -1 $DOC_ROOT_PREFIX | grep -q -e ^$VIRTUALHOST; then
	DOC_ROOT_FOLDER_MATCH=`ls -1 $DOC_ROOT_PREFIX | grep -e ^$VIRTUALHOST | head -n 1`
	/bin/echo -n "  - Use $DOC_ROOT_PREFIX/$DOC_ROOT_FOLDER_MATCH as the vhost folder? [Y/n] "
else
	/bin/echo -n "  - Use $DOC_ROOT_PREFIX/$VIRTUALHOST as the vhost folder? [Y/n] "
fi

read resp

case $resp in

	n*|N*) 
		while : ; do
			if [ -z "$FOLDER" ]; then
				/bin/echo -n "  - Enter new folder name (located in Sites): "
				read FOLDER
			else
				break
			fi
		done
	;;

	*)
		if [ -z $DOC_ROOT_FOLDER_MATCH ]; then
			if [ -d "$VIRTUALHOST" ]; then
				if [ -d $VIRTUALHOST/public ]; then
					/bin/echo -n "  - Found a public folder suggesting a Rails/Merb/Rack project. Use as DocumentRoot? [y/N] "
					read response
					if checkyesno ${response} ; then
						FOLDER=$VIRTUALHOST/public
					else
						FOLDER=$VIRTUALHOST
					fi
				fi
			else
				FOLDER=$VIRTUALHOST
			fi
		else
			if [ -d "$DOC_ROOT_FOLDER_MATCH/public" ]; then
				/bin/echo -n "  - Found a public folder suggesting a Rails/Merb/Rack project. Use as DocumentRoot? [y/N] "
				read response
				if checkyesno ${response} ; then
					FOLDER=$DOC_ROOT_FOLDER_MATCH/public
				else
					FOLDER=$DOC_ROOT_FOLDER_MATCH
				fi
			else
				FOLDER=$DOC_ROOT_FOLDER_MATCH
			fi

		fi
	;;
esac

# Create the folder if we need to...
if [ ! -d "${DOC_ROOT_PREFIX}/${FOLDER}" ]; then
	/bin/echo -n "  + Creating folder $DOC_ROOT_PREFIX/$FOLDER... "
	# su $USER -c "mkdir -p $DOC_ROOT_PREFIX/$FOLDER"
	mkdir -p "${DOC_ROOT_PREFIX}/${FOLDER}"
	
	# If $FOLDER is deeper than one level, we need to fix permissions properly
	case $FOLDER in
		*/*)
			subfolder=0
		;;
	
		*)
			subfolder=1
		;;
	esac

	if [ $subfolder != 1 ]; then
		# Loop through all the subfolders, fixing permissions as we go
		#
		# Note to fellow shell-scripters: I realize that I could avoid doing
		# this by just creating the folders with `su $USER -c mkdir ...`, but
		# I didn't think of it until about five minutes after I wrote this. I
		# decided to keep with this method so that I have a reference for myself
		# of a loop that moves down a tree of folders, as it may come in handy
		# in the future for me.
		dir=$FOLDER
		while [ $dir != "." ]; do
			chown $USER "${DOC_ROOT_PREFIX}/${dir}"
			dir=`dirname $dir`
		done
	else
		chown $USER "${DOC_ROOT_PREFIX}/${FOLDER}"
	fi
	
	/bin/echo "done"
fi	


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a default vhost file
#
/bin/echo -n "+ Creating vhost file... "
create_vhost $VIRTUALHOST "${DOC_ROOT_PREFIX}/${FOLDER}"
/bin/echo "done"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a default index.html if there isn't already one there
#
if [ ! -e "${DOC_ROOT_PREFIX}/${FOLDER}/htdocs/index.html" -a ! -e "${DOC_ROOT_PREFIX}/${FOLDER}/htdocs/index.php" ]; then

	touch ${DOC_ROOT_PREFIX}/${FOLDER}/htdocs/index.html
	chown $USER "${DOC_ROOT_PREFIX}/${FOLDER}/htdocs/index.html"

fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Restart apache for the changes to take effect
#
if [ -x /usr/bin/dscacheutil ]; then
	/bin/echo -n "+ Flushing cache... "
	dscacheutil -flushcache
	sleep 1
	curl --silent http://$VIRTUALHOST.local/ 2>&1 >/dev/null
	/bin/echo "done"
	
	dscacheutil -q host | grep -q $VIRTUALHOST
	
	sleep 1
fi

/bin/echo -n "+ Restarting Apache... "
$APACHECTL graceful 1>/dev/null 2>/dev/null
/bin/echo "done"

cat << __EOF

http://$VIRTUALHOST.local/ is setup and ready for use.

__EOF

/bin/echo "done"

